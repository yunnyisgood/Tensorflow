######### 문제설명 ###########
# 시 고 저 종 거래량만으로 컬럼 구성
# 행은 2011년 1월 3일 이후 데이터로 구성
# 삼성과 sk 각각 5개의 컬럼씩
# 앙상블하고
# 1. 금요일 종가 맞추기 (금 오전 9시 전까지)
# 2. 월요일 시가 맞추기 (월 오전 9시 전까지)
# 제출파일 : 1. 원소스      2. 가중치를 불러올 수 있는 소스       3. 가중치
# 파일명 : 본인이름 이니셜 + 삼성전자 종가.py   # LHI1_57000.py
# 메일제목 : 본인이름 주가                     # 이해인 1차 57000원
############################################################################
# 1. 데이터
import pandas as pd
import numpy as np
from sklearn.metrics import r2_score
import time
raw_samsung = pd.read_csv('../_data/samsung_20210721.csv', header=0, encoding='CP949')
raw_sk = pd.read_csv('../_data/SK_20210721.csv', header=0, encoding='CP949')
# ic(data_samsung)
# ic(data_sk)
df_samsung = pd.DataFrame(raw_samsung)   # 데이터프레임으로 전환
df_sk = pd.DataFrame(raw_sk)
# ic(df_samsung, df_sk)
samsung = df_samsung[['시가','고가','저가','거래량','종가']]   # 열 추출
sk = df_sk[['시가','고가','저가','거래량','종가']]
samsung = samsung.iloc[0:2601]     # 행 추출
sk = sk.iloc[0:2601]
# ic(samsung.shape, sk.shape)   # samsung.shape: (2601, 5), sk.shape: (2601, 5)
samsung = samsung.sort_index(ascending=False)   # 내림차순 정렬
sk = sk.sort_index(ascending=False)
print(samsung, sk)     #(2601, 5), (2601, 5)
'''
ic| samsung:            시가       고가       저가         거래량       종가
             2600  19100.0  19320.0  19000.0  13278100.0  19160.0
             2599  19120.0  19220.0  18980.0  13724400.0  19160.0
             2598  19100.0  19100.0  18840.0  16811200.0  18840.0
             2597  18840.0  18980.0  18460.0  19374400.0  18600.0
             2596  18300.0  18580.0  18280.0  23172350.0  18420.0
             ...       ...      ...      ...         ...      ...
             4     79800.0  80600.0  79500.0  13766279.0  80600.0
             3     80100.0  80100.0  79500.0  10859399.0  79800.0
             2     79100.0  79200.0  78800.0  13155414.0  79000.0
             1     78500.0  79000.0  78400.0  12456646.0  79000.0
             0     79000.0  79100.0  78500.0  12355296.0  78500.0
    sk:             시가        고가        저가         거래량        종가
        2600   25000.0   25300.0   24800.0  15107759.0   25300.0
        2599   25400.0   25600.0   25050.0  10931161.0   25600.0
        2598   25450.0   26300.0   25200.0  14139328.0   25900.0
        2597   26250.0   26600.0   25800.0  14287171.0   26100.0
        2596   26100.0   26450.0   25700.0   7024336.0   26100.0
        ...        ...       ...       ...         ...       ...
        4     123500.0  124000.0  122500.0   1500981.0  123500.0
        3     122000.0  122500.0  120500.0   2905546.0  121500.0
        2     119000.0  120000.0  118500.0   2066638.0  119000.0
        1     117500.0  119500.0  117500.0   2070074.0  118500.0
        0     119500.0  120000.0  116500.0   2864601.0  117000.0
'''
samsung = samsung.to_numpy()   # 넘파이로 변환
sk = sk.to_numpy()
size = 5
def split_xy(dataset, size):
    aaa = []      # 3차원
    for i in range(len(dataset) - size + 1):
        subset = dataset[i : (i + size), :]     # 2차원
        aaa.append(subset)
    return np.array(aaa)

x_samsung = split_xy(samsung, size)

x_sk = split_xy(sk, size)


print(x_samsung[:10])
print(x_sk[:10])
